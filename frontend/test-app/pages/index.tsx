"use client";
import React from "react";
import Head from "next/head";
import Image from "next/image";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import { useState } from "react";

const inter = Inter({ subsets: ["latin"] });


// pages/index.js
export default function Home() {

  const [formValues, setFormValues] = useState({
    billingFirstName: '',
    billingLastName: '',
    billingPhone: '',
    billingEmail: '',
    shippingFirstName: '',
    shippingLastName: '',
    shippingPhone: '',
    shippingEmail: '',
  });

  const [billingSameAsShipping, setBillingSameAsShipping] = useState(true);
  const [orderCreated, setOrderCreated]= useState<any>()

  const handleInputChange = (e: any) => {
    const { name, value } = e.target;
    console.log(name, value)
    setFormValues((prevValues) => ({
      ...prevValues,
      [name]: value,
    }));
  };

  const handleSubmit = async () => {
    // console.log("forms", formValues)
    try { 
      const orderResponse = await fetch('http://localhost:1337/api/v1/createOrder/7868668787', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          apiKey: process.env.NEXT_PUBLIC_API_KEY as string,
          ...formValues,
          billingSameAsShipping,
          // ...(sameAsShipping
          //   ? {}
          //   : {
          //       ...formValues,
          //     }),
        }),
      });

      if (!orderResponse.ok) {
        throw new Error('Error creating order');
      }
      const orderData = await orderResponse.json();
      const orderId = orderData.data.orderId;
      // console.log("orderId", orderId)


      const orderDetailsResponse = await fetch(`http://localhost:1337/api/v1/getOrder/`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          apiKey: process.env.NEXT_PUBLIC_API_KEY as string,
          orderId: orderId
        }),
      });

      const orderDetailsData = await orderDetailsResponse.json();
      setOrderCreated(orderDetailsData.data)

    } catch (error: any) {
      console.error('Error:', error.message);
    }


    setFormValues({
      billingFirstName: '',
      billingLastName: '',
      billingPhone: '',
      billingEmail: '',
      shippingFirstName: '',
      shippingLastName: '',
      shippingPhone: '',
      shippingEmail: '',
    })
  };

  return (
    <>
      <Head>
        <title>Create Form</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <form className={`${styles.form}`}>
          <div>
            <label className={`${styles.label}`}  htmlFor="billingFirstName">
              First Name
            </label>
            <input
              className={`${styles.input}`}
              type="text"
              id="billingFirstName"
              name="billingFirstName"
              value={formValues.billingFirstName}
              onChange={handleInputChange}
              required
            />
          </div>

          <div>
            <label className={`${styles.label}`} htmlFor="billingLastName">
              Last Name
            </label>
            <input
              className={`${styles.input}`}
              type="text"
              id="billingLastName"
              name="billingLastName"
              value={formValues.billingLastName}
              onChange={handleInputChange}
              required
            />
          </div>

          <div>
            <label className={`${styles.label}`} htmlFor="billingPhone">
              Phone
            </label>
            <input
              className={`${styles.input}`}
              type="tel"
              id="billingPhone"
              name="billingPhone"
              value={formValues.billingPhone}
              onChange={handleInputChange}
              required
            />
          </div>

          <div>
            <label className={`${styles.label}`} htmlFor="billingEmail">
              Email
            </label>
            <input
              className={`${styles.input}`}
              type="email"
              id="billingEmail"
              name="billingEmail"
              required
              value={formValues.billingEmail}
              onChange={handleInputChange}
            />
          </div>

          <div className={`${styles.checkboxContainer}`}>
            <input
              // className={`${styles.input}`}
              type="checkbox"
              id="sameAsShipping"
              name="sameAsShipping"
              checked={billingSameAsShipping}
              onChange={() => setBillingSameAsShipping(!billingSameAsShipping)}
            />
            <label className={`${styles.label}`} htmlFor="sameAsShipping">
              Billing is the same as shipping
            </label>
          </div>
          <div>
          </div>

          {!billingSameAsShipping && (
            <React.Fragment >
              <div>
                <label
                  className={`${styles.label}`}
                  htmlFor="shippingFirstName"
                >
                  First Name
                </label>
                <input
                  className={`${styles.input}`}
                  type="text"
                  id="shippingFirstName"
                  name="shippingFirstName"
                  value={formValues.shippingFirstName}
                  onChange={handleInputChange}
                />
              </div>
              <div>
                <label className={`${styles.label}`} htmlFor="shippingLastName">
                  Last Name
                </label>
                <input
                  className={`${styles.input}`}
                  type="text"
                  id="shippingLastName"
                  name="shippingLastName"
                  value={formValues.shippingLastName}
                  onChange={handleInputChange}
                />
              </div>
              <div>
                <label className={`${styles.label}`} htmlFor="shippingPhone">
                  Phone
                </label>
                <input
                  className={`${styles.input}`}
                  type="tel"
                  id="shippingPhone"
                  name="shippingPhone"
                  value={formValues.shippingPhone}
                  onChange={handleInputChange}
                />
              </div>
              <div>
                <label className={`${styles.label}`} htmlFor="shippingEmail">
                  Email
                </label>
                <input
                  className={`${styles.input}`}
                  type="email"
                  id="shippingEmail"
                  name="shippingEmail"
                  value={formValues.shippingEmail}
                  onChange={handleInputChange}
                />
              </div>
            </React.Fragment>
          )}

          <button className={`${styles.button}`} type="button" onClick={handleSubmit}>
            Submit
          </button>
        </form>


        {
          orderCreated &&                 
          <div>
            { Object.keys(orderCreated)?.map((list, index) =>{
            return (
              <div key={index}>
                {orderCreated[list]}
              </div>
            )
            })}
          </div>
        }
      </main>
    </>
  );
}
